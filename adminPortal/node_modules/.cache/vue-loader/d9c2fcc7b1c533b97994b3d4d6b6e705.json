{"remainingRequest":"F:\\sunrisers\\medicode\\medicode\\adminPortal\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\sunrisers\\medicode\\medicode\\adminPortal\\src\\pages\\Accounts\\CheckInView.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\sunrisers\\medicode\\medicode\\adminPortal\\src\\pages\\Accounts\\CheckInView.vue","mtime":1604089128614},{"path":"F:\\sunrisers\\medicode\\medicode\\adminPortal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1591157758729},{"path":"F:\\sunrisers\\medicode\\medicode\\adminPortal\\node_modules\\babel-loader\\lib\\index.js","mtime":1591157735766},{"path":"F:\\sunrisers\\medicode\\medicode\\adminPortal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1591157758729},{"path":"F:\\sunrisers\\medicode\\medicode\\adminPortal\\node_modules\\vue-loader\\lib\\index.js","mtime":1591157760591}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport 'imports-loader?$=jquery,this=>window!messenger/build/js/messenger'; // eslint-disable-line\r\nimport Widget from '@/components/Widget/Widget';\r\nimport vSelect from 'vue-select';\r\nimport mock from './mock';\r\nimport VueBarcode from 'vue-barcode-master';\r\nimport VueQrcode from 'vue-qrcode-master';\r\nconst { Messenger } = window;\r\n\r\n/* eslint-disable */\r\nfunction initializationMessengerCode() {\r\n  (function () {\r\n    let $,\r\n      FlatMessage,\r\n      spinner_template,\r\n      __hasProp = {}.hasOwnProperty,\r\n      __extends = function (child, parent) {\r\n        for (const key in parent) {\r\n          if (__hasProp.call(parent, key)) child[key] = parent[key];\r\n        }\r\n\r\n        function ctor() {\r\n          this.constructor = child;\r\n        }\r\n\r\n        ctor.prototype = parent.prototype;\r\n        child.prototype = new ctor();\r\n        child.__super__ = parent.prototype;\r\n        return child;\r\n      };\r\n\r\n    $ = jQuery;\r\n\r\n    spinner_template = '<div class=\"messenger-spinner\">\\n    <span class=\"messenger-spinner-side messenger-spinner-side-left\">\\n        <span class=\"messenger-spinner-fill\"></span>\\n    </span>\\n    <span class=\"messenger-spinner-side messenger-spinner-side-right\">\\n        <span class=\"messenger-spinner-fill\"></span>\\n    </span>\\n</div>';\r\n\r\n    FlatMessage = (function (_super) {\r\n      __extends(FlatMessage, _super);\r\n\r\n      function FlatMessage() {\r\n        return FlatMessage.__super__.constructor.apply(this, arguments);\r\n      }\r\n\r\n      FlatMessage.prototype.template = function (opts) {\r\n        let $message;\r\n        $message = FlatMessage.__super__.template.apply(this, arguments);\r\n        $message.append($(spinner_template));\r\n        return $message;\r\n      };\r\n\r\n      return FlatMessage;\r\n    }(Messenger.Message));\r\n\r\n    Messenger.themes.air = {\r\n      Message: FlatMessage,\r\n    };\r\n  }).call(window);\r\n}\r\n/* eslint-enable */\r\n\r\n\r\nexport default {\r\n  name: 'FormValidation',\r\n  components: { Widget,vSelect,barcode: VueBarcode,qrcode:VueQrcode},\r\n  data() {\r\n    return {\r\n            mock,\r\n      data:{\r\n        attachments:[]\r\n      },\r\n      checkInId: this.$route.params.checkInId,\r\n      isLoading:false,\r\n      locationClasses: 'messenger-fixed messenger-on-top messenger-on-right',\r\n    };\r\n  },\r\n  \r\n  methods: {\r\n        getQuantityColor(ordered,received){\r\n    if(received>=ordered){\r\n      return 'success';\r\n    }\r\n    else{\r\n      return 'warning';\r\n    }\r\n  },\r\n   async getCheckIn() {\r\n  try {\r\n   const response = await this.axios.get('https://backend.medicodesolution.com/development/checkin/'+ this.checkInId)\r\n   this.data = response.data.checkInInfo[0];\r\n  this.data.allProducts = JSON.parse(this.data.allProducts);\r\n \r\n \r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n},\r\n     navigateToDashboard(){\r\n        this.$router.push({name:'Dashboard' });\r\n    },\r\n  submit(){\r\n    var self=this;\r\n    // self.isLoading = true;\r\n  var finalProducts = new Array();\r\n\r\n  var index=0;var length = self.data.allProducts.length;\r\n   self.data.allProducts.forEach(function(entry) {\r\n   \r\n   if(entry.delivered_quantity!=undefined && entry.delivered_quantity!=0 && entry.delivered_quantity!='' ){\r\n    \r\n if(entry.packing_type=='TABLETS'){\r\n  var quantity = {\r\n     boxes:Number(entry.quantity_boxes),\r\n     stripsperbox:Number(entry.quantity_stripsperbox),\r\n     strips:Number(entry.quantity_strips),\r\n     tabletsperstrip:Number(entry.quantity_tabletsperstrip),\r\n     tablets:Number(entry.quantity_tablets)\r\n   };\r\n finalProducts.push({clinicId:parseInt(self.data.clinicId),checkInId:self.data.id,productId:entry.internal_qrcode,quantity:JSON.stringify(quantity),packing_type:entry.packing_type});\r\n   }\r\n    if(entry.packing_type=='Per vial' || entry.packing_type=='per vial' || entry.packing_type=='Vial / per cc' || entry.packing_type=='Vial / per 0.5 cc' || entry.packing_type=='vial per cc'){\r\n  var quantity = {\r\n     boxes:Number(entry.quantity_boxes),\r\n     vialsperbox:Number(entry.quantity_vialsperbox),\r\n     vials:Number(entry.quantity_vials),\r\n     mlpervial:Number(entry.quantity_mlpervial),\r\n     mls:Number(entry.quantity_mls)\r\n   };\r\n finalProducts.push({clinicId:parseInt(self.data.clinicId),checkInId:self.data.id,productId:entry.internal_qrcode,quantity:JSON.stringify(quantity),packing_type:entry.packing_type});\r\n   }\r\n     if(entry.packing_type=='per ampule'){\r\n  var quantity = {\r\n     boxes:Number(entry.quantity_boxes),\r\n     ampuleperbox:Number(entry.quantity_ampuleperbox),\r\n     ampules:Number(entry.quantity_ampules),\r\n     mlperampule:Number(entry.quantity_mlperampule),\r\n   };\r\n finalProducts.push({clinicId:parseInt(self.data.clinicId),checkInId:self.data.id,productId:entry.internal_qrcode,quantity:JSON.stringify(quantity),packing_type:entry.packing_type});\r\n   }\r\n        if(entry.packing_type=='BOTTLE'){\r\n  var quantity = {\r\n     boxes:Number(entry.quantity_boxes),\r\n     bottleperbox:Number(entry.quantity_bottleperbox),\r\n     bottles:Number(entry.quantity_bottles),\r\n     unitperbottle:entry.quantity_unitperbottle,\r\n     perbottle:Number(entry.quantity_perbottle),\r\n     unittotal:Number(entry.quantity_unittotal),\r\n   };\r\n  finalProducts.push({clinicId:parseInt(self.data.clinicId),checkInId:self.data.id,productId:entry.internal_qrcode,quantity:JSON.stringify(quantity),packing_type:entry.packing_type});\r\n   }\r\n     if(entry.packing_type=='TUBE'){\r\n  var quantity = {\r\n     boxes:Number(entry.quantity_boxes),\r\n     tubeperbox:Number(entry.quantity_tubeperbox),\r\n     tubes:Number(entry.quantity_tubes),\r\n     unitpertube:entry.quantity_unitpertube,\r\n     pertube:Number(entry.quantity_pertube),\r\n     unittotal:Number(entry.quantity_unittotal),\r\n   };\r\n finalProducts.push({clinicId:parseInt(self.data.clinicId),checkInId:self.data.id,productId:entry.internal_qrcode,quantity:JSON.stringify(quantity),packing_type:entry.packing_type});\r\n   }\r\n\r\n      if(entry.packing_type=='Per supp' || entry.packing_type=='SACHET' || entry.packing_type=='Sachet' || entry.packing_type=='box' || entry.packing_type=='Set' || entry.packing_type=='ROLLS' || entry.packing_type=='PIECES' || entry.packing_type=='pack' || entry.packing_type=='Diskus'){\r\n  var quantity = {\r\n     boxes:Number(entry.quantity_boxes),\r\n     unitperbox:Number(entry.quantity_unitperbox),\r\n     units:Number(entry.quantity_units),\r\n   };\r\n finalProducts.push({clinicId:parseInt(self.data.clinicId),checkInId:self.data.id,productId:entry.internal_qrcode,quantity:JSON.stringify(quantity),packing_type:entry.packing_type});\r\n   }\r\n\r\n\r\n\r\n\r\n }   \r\n\r\n  \r\n    index++;\r\n});\r\n  \r\n\r\n     //no validation\r\n   if(index==length){\r\n   return  console.log(finalProducts);\r\n    self.axios.post('https://backend.medicodesolution.com/development/clinicInventory/approve/submit', {\r\n          \r\n        finalProducts:finalProducts,\r\n        clinicId:self.data.clinicId\r\n    })\r\n                .then(function (response) {\r\n                if(response.status == 200 && response.data.success){\r\n                  console.log(response)\r\n                                   self.isLoading = false;\r\n                   Messenger().post({message:response.data.success, hideAfter: 3,showCloseButton:true});\r\n                   return self.navigateToDashboard();\r\n         \r\n                }\r\n                else {\r\n                  if(response.data.error){\r\n                    self.isLoading = false;\r\n                 Messenger().post({ type:'error',message :response.data.error, hideAfter: 3,showCloseButton:true});\r\n              return self.navigateToDashboard();\r\n                  }\r\n                 else {\r\n                   self.isLoading = false;\r\n               Messenger().post({ type:'error',message :response.error, hideAfter: 3,showCloseButton:true});\r\n                   return self.navigateToDashboard();\r\n                   }\r\n                }\r\n                })\r\n                .catch(function (error) {\r\n                self.isLoading = false;\r\n                 Messenger().post({ type:'error',message :error, hideAfter: 3,showCloseButton:true}); \r\n                     return self.navigateToDashboard();               \r\n                }); \r\n\r\n   }\r\n    \r\n\r\n  },\r\n    reject(){\r\n    var self=this;\r\n   self.isLoading = true;\r\n\r\n\r\n  \r\n    self.axios.post('https://backend.medicodesolution.com/development/clinicInventory/approve/reject/'+self.data.id, {\r\n          \r\n       \r\n\r\n    })\r\n                .then(function (response) {\r\n                if(response.status == 200 && response.data.success){\r\n                                   self.isLoading = false;\r\n                   Messenger().post({message:response.data.success, hideAfter: 3,showCloseButton:true});\r\n                   return self.navigateToDashboard();\r\n         \r\n                }\r\n                else {\r\n                  if(response.data.error){\r\n                    self.isLoading = false;\r\n                 Messenger().post({ type:'error',message :response.data.error, hideAfter: 3,showCloseButton:true});\r\n              return self.navigateToDashboard();\r\n                  }\r\n                 else {\r\n                   self.isLoading = false;\r\n               Messenger().post({ type:'error',message :response.error, hideAfter: 3,showCloseButton:true});\r\n                   return self.navigateToDashboard();\r\n                   }\r\n                }\r\n                })\r\n                .catch(function (error) {\r\n                self.isLoading = false;\r\n                 Messenger().post({ type:'error',message :error, hideAfter: 3,showCloseButton:true}); \r\n                     return self.navigateToDashboard();               \r\n                }); \r\n\r\n     \r\n\r\n  },\r\n  },\r\n   mounted(){\r\n     this.getCheckIn();\r\n         \r\n     \r\n  \r\n      \r\n   },\r\n     created() {\r\n    initializationMessengerCode();\r\n    Messenger.options = {\r\n      extraClasses: this.locationClasses,\r\n      theme: 'air',\r\n      showCloseButton: true,\r\n    };\r\n  \r\n  },\r\n};\r\n",{"version":3,"sources":["CheckInView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+GA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;;;AAGA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;;;AAIA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"CheckInView.vue","sourceRoot":"src\\pages\\Accounts","sourcesContent":["<template>\r\n  <div>\r\n    <ol class=\"breadcrumb\">\r\n      <li class=\"breadcrumb-item\">YOU ARE HERE</li>\r\n      <li class=\"breadcrumb-item active\">Check In Dashboard </li>\r\n    </ol>\r\n\r\n\r\n    <b-row>\r\n      <b-col md=\"8\" xs=\"12\">\r\n        <b-tabs class=\"mb-lg\">\r\n          <b-tab title=\"Information\" active>\r\n                 <fieldset>\r\n   <legend>Complete Information</legend>\r\n <div class=\"mb-lg\">\r\n            <h3 class=\"text-success mb-0\"><span v-if=\"data.status==0\">Awaiting Manager Confirmation</span><span v-if=\"data.status==1\">Confirmed & Added to Inventory</span><span v-if=\"data.status==-1\">Rejected/Pending Clarification</span></h3>\r\n            Status\r\n          </div>\r\n     <div class=\"mb-lg\">\r\n            <h3 class=\"text-success mb-0\">{{data.preCheckInId}}</h3>\r\n            Pre Check In Record\r\n          </div>\r\n           <div class=\"mb-lg\">\r\n            <h3 class=\"text-success mb-0\">{{data.invoiceId}}</h3>\r\n            Invoice Number \r\n          </div>\r\n           <div class=\"mb-lg\">\r\n            <h3 class=\"text-success mb-0\">{{data.totalAmount}}</h3>\r\n            Total Amount (RM)\r\n          </div>\r\n           <div class=\"mb-lg\">\r\n            <h3 class=\"text-success mb-0\">{{data.comments}}</h3>\r\n            Comments\r\n          </div>\r\n            <div class=\"mb-lg\">\r\n            <h3 class=\"text-success mb-0\">{{data.attachments}}</h3>\r\n            Attachments\r\n          </div>\r\n\r\n\r\n        \r\n          <table  class=\"table table-bordered table-lg mt-lg mb-0\" >\r\n              <thead>\r\n                <tr>\r\n                  <th class=\"hidden-sm-down\">Num.</th>\r\n                  <th>Product Name</th>\r\n                  <th>Product Type</th>\r\n                  <th class=\"hidden-sm-down\">Brand</th>\r\n                  <th class=\"\">Purchase Order Qty</th>\r\n                  <th class=\"\">Delivered Qty</th>\r\n                  <th class=\"\">Expiry Date</th>\r\n                  <th class=\"\">Batch Number</th>\r\n                   <th class=\"\">Manufacturer Barcode</th>\r\n                    <th class=\"\">Internal QR Code</th>\r\n                </tr>\r\n              </thead>\r\n                     <tbody>\r\n                <tr v-for=\"(product,index) in data.allProducts\" :key=\"product.product_name\">\r\n                  <td>{{index+1}}</td>\r\n                  <td> <b-badge variant=\"success\" class=\"text-gray-dark\">{{product.product_name}}</b-badge></td>\r\n                   <td>{{product.product_category}}</td>\r\n                    <td>{{product.manufacturer}}</td>\r\n                   <td v-if=\"product.packing_type=='TABLETS'\"> {{product.quantity_strips}} strips ({{product.quantity_tabletsperstrip}} per strip) | {{product.quantity_tablets}} tablets</td>\r\n                                       <td v-if=\"product.packing_type=='Vial / per cc' || product.packing_type=='Vial / per 0.5 cc' || product.packing_type=='per vial' || product.packing_type=='Per vial' || product.packing_type=='vial per cc'\"> {{product.quantity_mlpervial}} ML/vial | {{product.quantity_vials}} vials</td>\r\n                                         <td v-if=\"product.packing_type=='per ampule'\"> {{product.quantity_mlperampule}} ML/ampule | {{product.quantity_ampules}} ampules</td>\r\n                                         <td v-if=\"product.packing_type=='BOTTLE'\">  {{product.quantity_perbottle}}{{product.quantity_unitperbottle}}/bottle | {{product.quantity_bottles}} bottles | {{product.quantity_unittotal}}{{product.quantity_unitperbottle}} </td>\r\n                                            <td v-if=\"product.packing_type=='TUBE'\">  {{product.quantity_pertube}}{{product.quantity_unitpertube}}/tube | {{product.quantity_tubes}} tubes | {{product.quantity_unittotal}}{{product.quantity_unitpertube}} </td>\r\n                                             <td v-if=\"product.packing_type=='Per supp' || product.packing_type=='SACHET' || product.packing_type=='Sachet' || product.packing_type=='box' || product.packing_type=='Set' || product.packing_type=='ROLLS' || product.packing_type=='PIECES' || product.packing_type=='pack' || product.packing_type=='Diskus' \">  {{product.quantity_units}} units </td>\r\n                                          \r\n\r\n                                            <td v-if=\"product.packing_type=='TABLETS'\"> {{product.quantity_strips}} strips ({{product.quantity_tabletsperstrip}} per strip) | {{product.quantity_tablets}} tablets</td>\r\n                                       <td v-if=\"product.packing_type=='Vial / per cc' || product.packing_type=='Vial / per 0.5 cc' || product.packing_type=='per vial' || product.packing_type=='Per vial' || product.packing_type=='vial per cc'\"> {{product.quantity_mlpervial}} ML/vial | {{product.quantity_vials}} vials</td>\r\n                                         <td v-if=\"product.packing_type=='per ampule'\"> {{product.quantity_mlperampule}} ML/ampule | {{product.quantity_ampules}} ampules</td>\r\n                                         <td v-if=\"product.packing_type=='BOTTLE'\">  {{product.quantity_perbottle}}{{product.quantity_unitperbottle}}/bottle | {{product.quantity_bottles}} bottles | {{product.quantity_unittotal}}{{product.quantity_unitperbottle}} </td>\r\n                                            <td v-if=\"product.packing_type=='TUBE'\">  {{product.quantity_pertube}}{{product.quantity_unitpertube}}/tube | {{product.quantity_tubes}} tubes | {{product.quantity_unittotal}}{{product.quantity_unitpertube}} </td>\r\n                                             <td v-if=\"product.packing_type=='Per supp' || product.packing_type=='SACHET' || product.packing_type=='Sachet' || product.packing_type=='box' || product.packing_type=='Set' || product.packing_type=='ROLLS' || product.packing_type=='PIECES' || product.packing_type=='pack' || product.packing_type=='Diskus' \">  {{product.quantity_units}} units </td>\r\n                        <!--   <td><b-badge v-if=\"product.delivered_quantity\" :variant=\"getQuantityColor(product.quantity,product.delivered_quantity)\" class=\"text-gray-dark\">{{product.delivered_quantity}}</b-badge> <b-badge v-if=\"!product.delivered_quantity\" variant=\"danger\" class=\"text-gray-dark\">NA</b-badge></td> -->\r\n                              <td>{{product.expiry_date}}</td>\r\n                                    <td>{{product.batch_number}}</td>\r\n                                       <td><barcode v-bind:value=\"product.manufacturer_barcode\" format=\"CODE128\" :options=\"{ height:100 }\" v-if=\"product.manufacturer_barcode\">\r\n  Show this if the rendering fails.\r\n</barcode><span v-if=\"!product.manufacturer_barcode\">No record</span></td>\r\n <td><qrcode :value=\"product.internal_qrcode\" :options=\"{ height:100 }\" v-if=\"product.internal_qrcode\"></qrcode> <span v-if=\"!product.internal_qrcode\">No record</span></td>\r\n                     \r\n                </tr>\r\n              </tbody>\r\n            </table> \r\n                 </fieldset>\r\n                 <br>\r\n                 \r\n                  <b-button  variant=\"success\" class=\"btn-rounded \" @click=\"submit\" v-if=\"isLoading==false && data.status!=1\">\r\n              APPROVE & INSERT TO LIVE INVENTORY\r\n              </b-button> &nbsp;&nbsp;\r\n               <b-button  variant=\"warning\" class=\"btn-rounded \" @click=\"reject\" v-if=\"isLoading==false && data.status==0\">\r\n              REJECT\r\n              </b-button>\r\n          </b-tab>\r\n          \r\n        </b-tabs>\r\n      </b-col>\r\n      <b-col lg='8' xs='12'>\r\n       \r\n\r\n      \r\n      </b-col>\r\n    </b-row>\r\n    \r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport 'imports-loader?$=jquery,this=>window!messenger/build/js/messenger'; // eslint-disable-line\r\nimport Widget from '@/components/Widget/Widget';\r\nimport vSelect from 'vue-select';\r\nimport mock from './mock';\r\nimport VueBarcode from 'vue-barcode-master';\r\nimport VueQrcode from 'vue-qrcode-master';\r\nconst { Messenger } = window;\r\n\r\n/* eslint-disable */\r\nfunction initializationMessengerCode() {\r\n  (function () {\r\n    let $,\r\n      FlatMessage,\r\n      spinner_template,\r\n      __hasProp = {}.hasOwnProperty,\r\n      __extends = function (child, parent) {\r\n        for (const key in parent) {\r\n          if (__hasProp.call(parent, key)) child[key] = parent[key];\r\n        }\r\n\r\n        function ctor() {\r\n          this.constructor = child;\r\n        }\r\n\r\n        ctor.prototype = parent.prototype;\r\n        child.prototype = new ctor();\r\n        child.__super__ = parent.prototype;\r\n        return child;\r\n      };\r\n\r\n    $ = jQuery;\r\n\r\n    spinner_template = '<div class=\"messenger-spinner\">\\n    <span class=\"messenger-spinner-side messenger-spinner-side-left\">\\n        <span class=\"messenger-spinner-fill\"></span>\\n    </span>\\n    <span class=\"messenger-spinner-side messenger-spinner-side-right\">\\n        <span class=\"messenger-spinner-fill\"></span>\\n    </span>\\n</div>';\r\n\r\n    FlatMessage = (function (_super) {\r\n      __extends(FlatMessage, _super);\r\n\r\n      function FlatMessage() {\r\n        return FlatMessage.__super__.constructor.apply(this, arguments);\r\n      }\r\n\r\n      FlatMessage.prototype.template = function (opts) {\r\n        let $message;\r\n        $message = FlatMessage.__super__.template.apply(this, arguments);\r\n        $message.append($(spinner_template));\r\n        return $message;\r\n      };\r\n\r\n      return FlatMessage;\r\n    }(Messenger.Message));\r\n\r\n    Messenger.themes.air = {\r\n      Message: FlatMessage,\r\n    };\r\n  }).call(window);\r\n}\r\n/* eslint-enable */\r\n\r\n\r\nexport default {\r\n  name: 'FormValidation',\r\n  components: { Widget,vSelect,barcode: VueBarcode,qrcode:VueQrcode},\r\n  data() {\r\n    return {\r\n            mock,\r\n      data:{\r\n        attachments:[]\r\n      },\r\n      checkInId: this.$route.params.checkInId,\r\n      isLoading:false,\r\n      locationClasses: 'messenger-fixed messenger-on-top messenger-on-right',\r\n    };\r\n  },\r\n  \r\n  methods: {\r\n        getQuantityColor(ordered,received){\r\n    if(received>=ordered){\r\n      return 'success';\r\n    }\r\n    else{\r\n      return 'warning';\r\n    }\r\n  },\r\n   async getCheckIn() {\r\n  try {\r\n   const response = await this.axios.get('https://backend.medicodesolution.com/development/checkin/'+ this.checkInId)\r\n   this.data = response.data.checkInInfo[0];\r\n  this.data.allProducts = JSON.parse(this.data.allProducts);\r\n \r\n \r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n},\r\n     navigateToDashboard(){\r\n        this.$router.push({name:'Dashboard' });\r\n    },\r\n  submit(){\r\n    var self=this;\r\n    // self.isLoading = true;\r\n  var finalProducts = new Array();\r\n\r\n  var index=0;var length = self.data.allProducts.length;\r\n   self.data.allProducts.forEach(function(entry) {\r\n   \r\n   if(entry.delivered_quantity!=undefined && entry.delivered_quantity!=0 && entry.delivered_quantity!='' ){\r\n    \r\n if(entry.packing_type=='TABLETS'){\r\n  var quantity = {\r\n     boxes:Number(entry.quantity_boxes),\r\n     stripsperbox:Number(entry.quantity_stripsperbox),\r\n     strips:Number(entry.quantity_strips),\r\n     tabletsperstrip:Number(entry.quantity_tabletsperstrip),\r\n     tablets:Number(entry.quantity_tablets)\r\n   };\r\n finalProducts.push({clinicId:parseInt(self.data.clinicId),checkInId:self.data.id,productId:entry.internal_qrcode,quantity:JSON.stringify(quantity),packing_type:entry.packing_type});\r\n   }\r\n    if(entry.packing_type=='Per vial' || entry.packing_type=='per vial' || entry.packing_type=='Vial / per cc' || entry.packing_type=='Vial / per 0.5 cc' || entry.packing_type=='vial per cc'){\r\n  var quantity = {\r\n     boxes:Number(entry.quantity_boxes),\r\n     vialsperbox:Number(entry.quantity_vialsperbox),\r\n     vials:Number(entry.quantity_vials),\r\n     mlpervial:Number(entry.quantity_mlpervial),\r\n     mls:Number(entry.quantity_mls)\r\n   };\r\n finalProducts.push({clinicId:parseInt(self.data.clinicId),checkInId:self.data.id,productId:entry.internal_qrcode,quantity:JSON.stringify(quantity),packing_type:entry.packing_type});\r\n   }\r\n     if(entry.packing_type=='per ampule'){\r\n  var quantity = {\r\n     boxes:Number(entry.quantity_boxes),\r\n     ampuleperbox:Number(entry.quantity_ampuleperbox),\r\n     ampules:Number(entry.quantity_ampules),\r\n     mlperampule:Number(entry.quantity_mlperampule),\r\n   };\r\n finalProducts.push({clinicId:parseInt(self.data.clinicId),checkInId:self.data.id,productId:entry.internal_qrcode,quantity:JSON.stringify(quantity),packing_type:entry.packing_type});\r\n   }\r\n        if(entry.packing_type=='BOTTLE'){\r\n  var quantity = {\r\n     boxes:Number(entry.quantity_boxes),\r\n     bottleperbox:Number(entry.quantity_bottleperbox),\r\n     bottles:Number(entry.quantity_bottles),\r\n     unitperbottle:entry.quantity_unitperbottle,\r\n     perbottle:Number(entry.quantity_perbottle),\r\n     unittotal:Number(entry.quantity_unittotal),\r\n   };\r\n  finalProducts.push({clinicId:parseInt(self.data.clinicId),checkInId:self.data.id,productId:entry.internal_qrcode,quantity:JSON.stringify(quantity),packing_type:entry.packing_type});\r\n   }\r\n     if(entry.packing_type=='TUBE'){\r\n  var quantity = {\r\n     boxes:Number(entry.quantity_boxes),\r\n     tubeperbox:Number(entry.quantity_tubeperbox),\r\n     tubes:Number(entry.quantity_tubes),\r\n     unitpertube:entry.quantity_unitpertube,\r\n     pertube:Number(entry.quantity_pertube),\r\n     unittotal:Number(entry.quantity_unittotal),\r\n   };\r\n finalProducts.push({clinicId:parseInt(self.data.clinicId),checkInId:self.data.id,productId:entry.internal_qrcode,quantity:JSON.stringify(quantity),packing_type:entry.packing_type});\r\n   }\r\n\r\n      if(entry.packing_type=='Per supp' || entry.packing_type=='SACHET' || entry.packing_type=='Sachet' || entry.packing_type=='box' || entry.packing_type=='Set' || entry.packing_type=='ROLLS' || entry.packing_type=='PIECES' || entry.packing_type=='pack' || entry.packing_type=='Diskus'){\r\n  var quantity = {\r\n     boxes:Number(entry.quantity_boxes),\r\n     unitperbox:Number(entry.quantity_unitperbox),\r\n     units:Number(entry.quantity_units),\r\n   };\r\n finalProducts.push({clinicId:parseInt(self.data.clinicId),checkInId:self.data.id,productId:entry.internal_qrcode,quantity:JSON.stringify(quantity),packing_type:entry.packing_type});\r\n   }\r\n\r\n\r\n\r\n\r\n }   \r\n\r\n  \r\n    index++;\r\n});\r\n  \r\n\r\n     //no validation\r\n   if(index==length){\r\n   return  console.log(finalProducts);\r\n    self.axios.post('https://backend.medicodesolution.com/development/clinicInventory/approve/submit', {\r\n          \r\n        finalProducts:finalProducts,\r\n        clinicId:self.data.clinicId\r\n    })\r\n                .then(function (response) {\r\n                if(response.status == 200 && response.data.success){\r\n                  console.log(response)\r\n                                   self.isLoading = false;\r\n                   Messenger().post({message:response.data.success, hideAfter: 3,showCloseButton:true});\r\n                   return self.navigateToDashboard();\r\n         \r\n                }\r\n                else {\r\n                  if(response.data.error){\r\n                    self.isLoading = false;\r\n                 Messenger().post({ type:'error',message :response.data.error, hideAfter: 3,showCloseButton:true});\r\n              return self.navigateToDashboard();\r\n                  }\r\n                 else {\r\n                   self.isLoading = false;\r\n               Messenger().post({ type:'error',message :response.error, hideAfter: 3,showCloseButton:true});\r\n                   return self.navigateToDashboard();\r\n                   }\r\n                }\r\n                })\r\n                .catch(function (error) {\r\n                self.isLoading = false;\r\n                 Messenger().post({ type:'error',message :error, hideAfter: 3,showCloseButton:true}); \r\n                     return self.navigateToDashboard();               \r\n                }); \r\n\r\n   }\r\n    \r\n\r\n  },\r\n    reject(){\r\n    var self=this;\r\n   self.isLoading = true;\r\n\r\n\r\n  \r\n    self.axios.post('https://backend.medicodesolution.com/development/clinicInventory/approve/reject/'+self.data.id, {\r\n          \r\n       \r\n\r\n    })\r\n                .then(function (response) {\r\n                if(response.status == 200 && response.data.success){\r\n                                   self.isLoading = false;\r\n                   Messenger().post({message:response.data.success, hideAfter: 3,showCloseButton:true});\r\n                   return self.navigateToDashboard();\r\n         \r\n                }\r\n                else {\r\n                  if(response.data.error){\r\n                    self.isLoading = false;\r\n                 Messenger().post({ type:'error',message :response.data.error, hideAfter: 3,showCloseButton:true});\r\n              return self.navigateToDashboard();\r\n                  }\r\n                 else {\r\n                   self.isLoading = false;\r\n               Messenger().post({ type:'error',message :response.error, hideAfter: 3,showCloseButton:true});\r\n                   return self.navigateToDashboard();\r\n                   }\r\n                }\r\n                })\r\n                .catch(function (error) {\r\n                self.isLoading = false;\r\n                 Messenger().post({ type:'error',message :error, hideAfter: 3,showCloseButton:true}); \r\n                     return self.navigateToDashboard();               \r\n                }); \r\n\r\n     \r\n\r\n  },\r\n  },\r\n   mounted(){\r\n     this.getCheckIn();\r\n         \r\n     \r\n  \r\n      \r\n   },\r\n     created() {\r\n    initializationMessengerCode();\r\n    Messenger.options = {\r\n      extraClasses: this.locationClasses,\r\n      theme: 'air',\r\n      showCloseButton: true,\r\n    };\r\n  \r\n  },\r\n};\r\n</script>\r\n"]}]}