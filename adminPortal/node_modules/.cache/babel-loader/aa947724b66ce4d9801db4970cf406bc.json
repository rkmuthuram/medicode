{"remainingRequest":"F:\\sunrisers\\medicode\\medicode\\adminPortal\\node_modules\\babel-loader\\lib\\index.js!F:\\sunrisers\\medicode\\medicode\\adminPortal\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\sunrisers\\medicode\\medicode\\adminPortal\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\sunrisers\\medicode\\medicode\\adminPortal\\src\\pages\\Dashboard\\components\\MainChart\\MainChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\sunrisers\\medicode\\medicode\\adminPortal\\src\\pages\\Dashboard\\components\\MainChart\\MainChart.vue","mtime":1583767198581},{"path":"F:\\sunrisers\\medicode\\medicode\\adminPortal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1591157758729},{"path":"F:\\sunrisers\\medicode\\medicode\\adminPortal\\node_modules\\babel-loader\\lib\\index.js","mtime":1591157735766},{"path":"F:\\sunrisers\\medicode\\medicode\\adminPortal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1591157758729},{"path":"F:\\sunrisers\\medicode\\medicode\\adminPortal\\node_modules\\vue-loader\\lib\\index.js","mtime":1591157760591}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport $ from 'jquery';\nimport Widget from '@/components/Widget/Widget';\n/* eslint-disable */\n\nimport 'imports-loader?jQuery=jquery,this=>window!flot';\nimport 'imports-loader?jQuery=jquery,this=>window!flot/jquery.flot.selection.js';\nimport 'imports-loader?jQuery=jquery,this=>window!flot/jquery.flot.resize';\n/* eslint-enable */\n\nexport default {\n  name: 'MainChart',\n  components: {\n    Widget: Widget\n  },\n  data: function data() {\n    return {\n      chartLegend: $('#main-chart .chart-legend')\n    };\n  },\n  methods: {\n    getMainChartData: function getMainChartData() {\n      function generateRandomPicks(minPoint, maxPoint, picksAmount, xMax) {\n        var x = 0;\n        var y = 0;\n        var result = [];\n        var xStep = 1;\n        var smoothness = 0.3;\n        var pointsPerPick = Math.ceil(xMax / (picksAmount * 2 + 1) / 2);\n        var maxValues = [];\n        var minValues = [];\n\n        for (var i = 0; i < picksAmount; i += 1) {\n          var minResult = minPoint + Math.random();\n          var maxResult = maxPoint - Math.random();\n          minValues.push(minResult);\n          maxValues.push(maxResult);\n        }\n\n        var localMax = maxValues.shift(0);\n        var localMin = 0;\n        var yStep = parseFloat(((localMax - localMin) / pointsPerPick).toFixed(2));\n\n        for (var j = 0; j < Math.ceil(xMax); j += 1) {\n          result.push([x, y]);\n\n          if (y + yStep >= localMax || y + yStep <= localMin) {\n            y += yStep * smoothness;\n          } else if (result[result.length - 1][1] === localMax || result[result.length - 1][1] === localMin) {\n            y += yStep * smoothness;\n          } else {\n            y += yStep;\n          }\n\n          if (y > localMax) {\n            y = localMax;\n          } else if (y < localMin) {\n            y = localMin;\n          }\n\n          if (y === localMin) {\n            localMax = maxValues.shift(0) || localMax;\n            var share = (localMax - localMin) / localMax;\n            var p = share > 0.5 ? Math.round(pointsPerPick * 1.2) : Math.round(pointsPerPick * share);\n            yStep = parseFloat(((localMax - localMin) / p).toFixed(2));\n            yStep *= Math.abs(yStep);\n          }\n\n          if (y === localMax) {\n            localMin = minValues.shift(0) || localMin;\n\n            var _share = (localMax - localMin) / localMax;\n\n            var _p = _share > 0.5 ? Math.round(pointsPerPick * 1.5) : Math.round(pointsPerPick * 0.5);\n\n            yStep = parseFloat(((localMax - localMin) / _p).toFixed(2));\n            yStep *= -1;\n          }\n\n          x += xStep;\n        }\n\n        return result;\n      }\n\n      var d1 = generateRandomPicks(0.2, 3, 4, 90);\n      var d2 = generateRandomPicks(0.4, 3.8, 4, 90);\n      var d3 = generateRandomPicks(0.2, 4.2, 3, 90);\n      return [d1, d2, d3];\n    },\n    onDrawHook: function onDrawHook() {\n      this.$chartLegend.find('.legendColorBox > div').css({\n        border: 15,\n        borderRadius: 0,\n        paddingTop: 5,\n        display: 'flex',\n        justifyContent: 'center'\n      }).children('div').css({\n        borderWidth: 1,\n        borderRadius: 0,\n        width: 30\n      });\n      this.$chartLegend.find('tbody td').css({\n        paddingLeft: 10,\n        paddingRight: 10,\n        textAlign: 'center'\n      });\n      var labels = this.$chartLegend.find('.legendLabel').detach();\n      this.$chartLegend.find('tbody').prepend('<tr></tr>');\n      this.$chartLegend.find('tbody tr:eq(0)').append(labels);\n    },\n    initChart: function initChart() {\n      var data = this.getMainChartData();\n      var ticks = ['Dec 19', 'Dec 25', 'Dec 31', 'Jan 10', 'Jan 14', 'Jan 20', 'Jan 27', 'Jan 30', 'Feb 2', 'Feb 8', 'Feb 15', 'Feb 22', 'Feb 28', 'Mar 7', 'Mar 17']; // check the screen size and either show tick for every 4th tick on large screens, or\n      // every 8th tick on mobiles\n\n      var tickInterval = screen.width < 500 ? 10 : 6; // eslint-disable-line\n\n      var counter = 0;\n      return $.plot(this.$chartContainer, [{\n        width: '100%',\n        label: 'Saturday',\n        data: data[0],\n        lines: {\n          show: true,\n          fill: 0.3,\n          lineWidth: 0\n        },\n        points: {\n          fillColor: '#A7BEFF',\n          symbol: function symbol(ctx, x, y) {\n            // count for every 8nd point to show on line\n            if (counter % 8 === 0) {\n              ctx.arc(x, y, 2, 0, Math.PI * 2, false);\n            }\n\n            counter += 1;\n          }\n        },\n        shadowSize: 0\n      }, {\n        label: 'Monday',\n        data: data[1],\n        points: {\n          fillColor: '#3abf94'\n        },\n        lines: {\n          show: true,\n          fill: false,\n          lineWidth: .4\n        },\n        shadowSize: 0\n      }, {\n        label: 'Tuesday',\n        data: data[2],\n        lines: {\n          show: true,\n          lineWidth: 2\n        },\n        points: {\n          fillColor: '#f55d5d'\n        },\n        shadowSize: 0\n      }], {\n        xaxis: {\n          tickColor: 'rgba(255,255,255,.04)',\n          tickSize: tickInterval,\n          color: '#fff',\n          tickFormatter: function tickFormatter(i) {\n            return ticks[i / tickInterval];\n          },\n          font: {\n            lineHeight: 11,\n            weight: 400\n          }\n        },\n        yaxis: {\n          tickColor: 'rgba(255,255,255,.5)',\n          color: '#fff',\n          max: 5,\n          font: {\n            lineHeight: 11,\n            weight: 400\n          }\n        },\n        points: {\n          show: true,\n          fill: true,\n          lineWidth: 1,\n          radius: 1,\n          symbol: function symbol(ctx, x, y) {\n            // show every 5th point on line\n            if (counter % 5 === 0) {\n              ctx.arc(x, y, 2, 0, Math.PI * 2, false);\n            }\n\n            counter += 1;\n          }\n        },\n        grid: {\n          backgroundColor: {\n            colors: ['transparent', 'transparent']\n          },\n          borderWidth: 0,\n          margin: 0,\n          minBorderMargin: 0,\n          labelMargin: 20,\n          hoverable: true,\n          clickable: true,\n          mouseActiveRadius: 6\n        },\n        legend: {\n          noColumns: 3,\n          container: $('#main-chart .chart-legend')\n        },\n        colors: ['#E2E1FF', '#3abf94', '#ffc247'],\n        hooks: {\n          draw: [this.onDrawHook.bind(this)]\n        }\n      });\n    },\n    initEventListeners: function initEventListeners() {\n      var self = this;\n      this.$chartContainer.on('plothover', function (event, pos, item) {\n        if (item) {\n          var x = item.datapoint[0].toFixed(2);\n          var y = item.datapoint[1].toFixed(2);\n          self.$chartTooltip.html(\"\".concat(item.series.label, \" at \").concat(x, \" : \").concat(y)).css({\n            top: item.pageY + 5 - window.scrollY,\n            left: item.pageX + 5 - window.scrollX\n          }).fadeIn(200);\n        } else {\n          self.$chartTooltip.hide();\n        }\n      });\n    }\n  },\n  mounted: function mounted() {\n    this.$chartContainer = $(this.$refs.chartContainer);\n    this.$chartLegend = $('#main-chart  .chart-legend');\n    this.$chartTooltip = $(this.$refs.chartTooltip);\n    this.initChart();\n    this.initEventListeners();\n  }\n};",{"version":3,"sources":["MainChart.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <Widget\n    bodyClass=\"mt\"\n    class=\"mb-xlg\"\n    id=\"main-chart\"\n    title=\"\n        <div class='row'>\n          <div class='col-sm-5 col-xs-12'>\n            <h5>\n             Weekly Impression <span class='fw-semi-bold'>Line Chart</span>\n            </h5>\n          </div>\n          <div class='col-xs-12 col-sm-7'>\n            <div class='chart-legend' />\n          </div>\n        </div>\n      \"\n      customHeader\n    collapse close\n    >\n    <div ref=\"chartContainer\" style=\"width: 100%; height: 250px\" />\n    <div class=\"chart-tooltip\" ref=\"chartTooltip\" />\n  </Widget>\n</template>\n\n<script>\nimport $ from 'jquery';\nimport Widget from '@/components/Widget/Widget';\n\n/* eslint-disable */\nimport 'imports-loader?jQuery=jquery,this=>window!flot';\nimport 'imports-loader?jQuery=jquery,this=>window!flot/jquery.flot.selection.js';\nimport 'imports-loader?jQuery=jquery,this=>window!flot/jquery.flot.resize';\n/* eslint-enable */\n\nexport default {\n  name: 'MainChart',\n  components: { Widget },\n  data() {\n    return {\n      chartLegend: $('#main-chart .chart-legend'),\n    };\n  },\n  methods: {\n    getMainChartData() {\n      function generateRandomPicks(minPoint, maxPoint, picksAmount, xMax) {\n        let x = 0;\n        let y = 0;\n        const result = [];\n        const xStep = 1;\n        const smoothness = 0.3;\n        const pointsPerPick = Math.ceil(xMax / ((picksAmount * 2) + 1) / 2);\n\n        const maxValues = [];\n        const minValues = [];\n\n        for (let i = 0; i < picksAmount; i += 1) {\n          const minResult = minPoint + Math.random();\n          const maxResult = maxPoint - Math.random();\n\n          minValues.push(minResult);\n          maxValues.push(maxResult);\n        }\n\n        let localMax = maxValues.shift(0);\n        let localMin = 0;\n        let yStep = parseFloat(((localMax - localMin) / pointsPerPick).toFixed(2));\n\n        for (let j = 0; j < Math.ceil(xMax); j += 1) {\n          result.push([x, y]);\n\n          if ((y + yStep >= localMax) || (y + yStep <= localMin)) {\n            y += yStep * smoothness;\n          } else if ((result[result.length - 1][1] === localMax)\n          || (result[result.length - 1][1] === localMin)) {\n            y += yStep * smoothness;\n          } else {\n            y += yStep;\n          }\n\n          if (y > localMax) {\n            y = localMax;\n          } else if (y < localMin) {\n            y = localMin;\n          }\n\n          if (y === localMin) {\n            localMax = maxValues.shift(0) || localMax;\n\n            const share = (localMax - localMin) / localMax;\n            const p = share > 0.5\n              ? Math.round(pointsPerPick * 1.2)\n              : Math.round(pointsPerPick * share);\n\n            yStep = parseFloat(((localMax - localMin) / p).toFixed(2));\n            yStep *= Math.abs(yStep);\n          }\n\n          if (y === localMax) {\n            localMin = minValues.shift(0) || localMin;\n\n            const share = (localMax - localMin) / localMax;\n            const p = share > 0.5\n              ? Math.round(pointsPerPick * 1.5)\n              : Math.round(pointsPerPick * 0.5);\n\n            yStep = parseFloat(((localMax - localMin) / p).toFixed(2));\n            yStep *= -1;\n          }\n\n          x += xStep;\n        }\n\n        return result;\n      }\n\n      const d1 = generateRandomPicks(0.2, 3, 4, 90);\n      const d2 = generateRandomPicks(0.4, 3.8, 4, 90);\n      const d3 = generateRandomPicks(0.2, 4.2, 3, 90);\n\n      return [d1, d2, d3];\n    },\n    onDrawHook() {\n      this.$chartLegend\n        .find('.legendColorBox > div')\n        .css({\n          border: 15,\n          borderRadius: 0,\n          paddingTop: 5,\n          display: 'flex',\n          justifyContent: 'center',\n        })\n        .children('div')\n        .css({\n          borderWidth: 1,\n          borderRadius: 0,\n          width: 30,\n        });\n\n      this.$chartLegend.find('tbody td').css({\n        paddingLeft: 10,\n        paddingRight: 10,\n        textAlign: 'center',\n      });\n\n      const labels = this.$chartLegend.find('.legendLabel').detach();\n      this.$chartLegend.find('tbody').prepend('<tr></tr>');\n      this.$chartLegend.find('tbody tr:eq(0)').append(labels);\n    },\n    initChart() {\n      const data = this.getMainChartData();\n\n      const ticks = ['Dec 19', 'Dec 25', 'Dec 31', 'Jan 10', 'Jan 14',\n        'Jan 20', 'Jan 27', 'Jan 30', 'Feb 2', 'Feb 8', 'Feb 15',\n        'Feb 22', 'Feb 28', 'Mar 7', 'Mar 17'];\n\n      // check the screen size and either show tick for every 4th tick on large screens, or\n      // every 8th tick on mobiles\n      const tickInterval = screen.width < 500 ? 10 : 6; // eslint-disable-line\n      let counter = 0;\n\n      return $.plot(this.$chartContainer, [{\n        width: '100%',\n        label: 'Saturday',\n        data: data[0],\n        lines: {\n          show: true,\n          fill: 0.3,\n          lineWidth:0,\n        },\n        points: {\n          fillColor: '#A7BEFF',\n          symbol: (ctx, x, y) => {\n            // count for every 8nd point to show on line\n            if (counter % 8 === 0) { ctx.arc(x, y, 2, 0, Math.PI * 2, false); }\n\n            counter += 1;\n          },\n        },\n        shadowSize: 0,\n      }, {\n        label: 'Monday',\n        data: data[1],\n        points: {\n          fillColor: '#3abf94',\n        },\n        lines: {\n          show: true,\n          fill: false,\n          lineWidth:.4,\n        },\n        shadowSize: 0,\n      }, {\n        label: 'Tuesday',\n        data: data[2],\n        lines: {\n          show: true,\n          lineWidth: 2,\n        },\n        points: {\n          fillColor: '#f55d5d',\n        },\n        shadowSize: 0,\n      }], {\n        xaxis: {\n          tickColor: 'rgba(255,255,255,.04)',\n          tickSize: tickInterval,\n          color: '#fff',\n          tickFormatter: i => ticks[i / tickInterval],\n          font: {\n            lineHeight: 11,\n            weight: 400,\n          },\n        },\n        yaxis: {\n          tickColor: 'rgba(255,255,255,.5)',\n          color: '#fff',\n          max: 5,\n          font: {\n            lineHeight: 11,\n            weight: 400,\n          },\n        },\n        points: {\n          show: true,\n          fill: true,\n          lineWidth: 1,\n          radius: 1,\n          symbol: (ctx, x, y) => {\n            // show every 5th point on line\n            if (counter % 5 === 0) { ctx.arc(x, y, 2, 0, Math.PI * 2, false); }\n\n            counter += 1;\n          },\n        },\n        grid: {\n          backgroundColor: { colors: ['transparent', 'transparent'] },\n          borderWidth: 0,\n          margin: 0,\n          minBorderMargin: 0,\n          labelMargin: 20,\n          hoverable: true,\n          clickable: true,\n          mouseActiveRadius: 6,\n        },\n        legend: {\n          noColumns: 3,\n          container: $('#main-chart .chart-legend'),\n        },\n        colors: ['#E2E1FF', '#3abf94', '#ffc247'],\n        hooks: {\n          draw: [this.onDrawHook.bind(this)],\n        },\n      });\n    },\n    initEventListeners() {\n      const self = this;\n\n      this.$chartContainer.on('plothover', (event, pos, item) => {\n        if (item) {\n          const x = item.datapoint[0].toFixed(2);\n          const y = item.datapoint[1].toFixed(2);\n\n          self.$chartTooltip.html(`${item.series.label} at ${x} : ${y}`)\n            .css({\n              top: (item.pageY + 5) - window.scrollY,\n              left: (item.pageX + 5) - window.scrollX,\n            })\n            .fadeIn(200);\n        } else {\n          self.$chartTooltip.hide();\n        }\n      });\n    },\n  },\n  mounted() {\n    this.$chartContainer = $(this.$refs.chartContainer);\n    this.$chartLegend = $('#main-chart  .chart-legend');\n    this.$chartTooltip = $(this.$refs.chartTooltip);\n\n    this.initChart();\n    this.initEventListeners();\n  },\n};\n</script>\n"],"sourceRoot":"src\\pages\\Dashboard\\components\\MainChart"}]}