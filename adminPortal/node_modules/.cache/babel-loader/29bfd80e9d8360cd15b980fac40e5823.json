{"remainingRequest":"F:\\sunrisers\\medicode\\medicode\\adminPortal\\node_modules\\thread-loader\\dist\\cjs.js!F:\\sunrisers\\medicode\\medicode\\adminPortal\\node_modules\\babel-loader\\lib\\index.js!F:\\sunrisers\\medicode\\medicode\\adminPortal\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\sunrisers\\medicode\\medicode\\adminPortal\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\sunrisers\\medicode\\medicode\\adminPortal\\src\\pages\\Accounts\\CheckInView.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\sunrisers\\medicode\\medicode\\adminPortal\\src\\pages\\Accounts\\CheckInView.vue","mtime":1610310641073},{"path":"F:\\sunrisers\\medicode\\medicode\\adminPortal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1591157758729},{"path":"F:\\sunrisers\\medicode\\medicode\\adminPortal\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1591157760290},{"path":"F:\\sunrisers\\medicode\\medicode\\adminPortal\\node_modules\\babel-loader\\lib\\index.js","mtime":1591157735766},{"path":"F:\\sunrisers\\medicode\\medicode\\adminPortal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1591157758729},{"path":"F:\\sunrisers\\medicode\\medicode\\adminPortal\\node_modules\\vue-loader\\lib\\index.js","mtime":1591157760591}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"F:\\\\sunrisers\\\\medicode\\\\medicode\\\\adminPortal\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport 'imports-loader?$=jquery,this=>window!messenger/build/js/messenger'; // eslint-disable-line\n\nimport Widget from '@/components/Widget/Widget';\nimport vSelect from 'vue-select';\nimport mock from './mock';\nimport VueBarcode from 'vue-barcode-master';\nimport VueQrcode from 'vue-qrcode-master';\nvar _window = window,\n    Messenger = _window.Messenger;\n/* eslint-disable */\n\nfunction initializationMessengerCode() {\n  (function () {\n    var $,\n        FlatMessage,\n        spinner_template,\n        __hasProp = {}.hasOwnProperty,\n        __extends = function __extends(child, parent) {\n      for (var key in parent) {\n        if (__hasProp.call(parent, key)) child[key] = parent[key];\n      }\n\n      function ctor() {\n        this.constructor = child;\n      }\n\n      ctor.prototype = parent.prototype;\n      child.prototype = new ctor();\n      child.__super__ = parent.prototype;\n      return child;\n    };\n\n    $ = jQuery;\n    spinner_template = '<div class=\"messenger-spinner\">\\n    <span class=\"messenger-spinner-side messenger-spinner-side-left\">\\n        <span class=\"messenger-spinner-fill\"></span>\\n    </span>\\n    <span class=\"messenger-spinner-side messenger-spinner-side-right\">\\n        <span class=\"messenger-spinner-fill\"></span>\\n    </span>\\n</div>';\n\n    FlatMessage = function (_super) {\n      __extends(FlatMessage, _super);\n\n      function FlatMessage() {\n        return FlatMessage.__super__.constructor.apply(this, arguments);\n      }\n\n      FlatMessage.prototype.template = function (opts) {\n        var $message;\n        $message = FlatMessage.__super__.template.apply(this, arguments);\n        $message.append($(spinner_template));\n        return $message;\n      };\n\n      return FlatMessage;\n    }(Messenger.Message);\n\n    Messenger.themes.air = {\n      Message: FlatMessage\n    };\n  }).call(window);\n}\n/* eslint-enable */\n\n\nexport default {\n  name: 'FormValidation',\n  components: {\n    Widget: Widget,\n    vSelect: vSelect,\n    barcode: VueBarcode,\n    qrcode: VueQrcode\n  },\n  data: function data() {\n    return {\n      clinicId: this.$route.params.clinicId,\n      clinicName: '',\n      mock: mock,\n      data: {\n        attachments: []\n      },\n      checkInId: this.$route.params.checkInId,\n      isLoading: false,\n      locationClasses: 'messenger-fixed messenger-on-top messenger-on-right'\n    };\n  },\n  methods: {\n    getAccount: function () {\n      var _getAccount = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var response;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return this.axios.get('https://backend.medicodesolution.com/development/clinic/' + this.clinicId);\n\n              case 3:\n                response = _context.sent;\n                this.clinicName = response.data.accountInfo[0].name;\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                console.error(_context.t0);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n\n      return function getAccount() {\n        return _getAccount.apply(this, arguments);\n      };\n    }(),\n    getQuantityColor: function getQuantityColor(ordered, received) {\n      if (received >= ordered) {\n        return 'success';\n      } else {\n        return 'warning';\n      }\n    },\n    getCheckIn: function () {\n      var _getCheckIn = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var response;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return this.axios.get('https://backend.medicodesolution.com/development/checkin/' + this.checkInId);\n\n              case 3:\n                response = _context2.sent;\n                this.data = response.data.checkInInfo[0];\n                this.data.allProducts = JSON.parse(this.data.allProducts);\n                _context2.next = 11;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.error(_context2.t0);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 8]]);\n      }));\n\n      return function getCheckIn() {\n        return _getCheckIn.apply(this, arguments);\n      };\n    }(),\n    navigateToDashboard: function navigateToDashboard() {\n      this.$router.push({\n        name: 'Dashboard'\n      });\n    },\n    submit: function submit() {\n      var self = this; // self.isLoading = true;\n\n      var finalProducts = new Array();\n      var index = 0;\n      var length = self.data.allProducts.length;\n      self.data.allProducts.forEach(function (entry) {\n        if (entry.delivered_quantity != undefined && entry.delivered_quantity != 0 && entry.delivered_quantity != '') {\n          if (entry.packing_type == 'TABLETS') {\n            var quantity = {\n              boxes: Number(entry.quantity_boxes),\n              stripsperbox: Number(entry.quantity_stripsperbox),\n              strips: Number(entry.quantity_strips),\n              tabletsperstrip: Number(entry.quantity_tabletsperstrip),\n              tablets: Number(entry.quantity_tablets)\n            };\n            finalProducts.push({\n              clinicId: parseInt(self.data.clinicId),\n              checkInId: self.data.id,\n              productId: entry.internal_qrcode,\n              quantity: JSON.stringify(quantity),\n              packing_type: entry.packing_type\n            });\n          }\n\n          if (entry.packing_type == 'Per vial' || entry.packing_type == 'per vial' || entry.packing_type == 'Vial / per cc' || entry.packing_type == 'Vial / per 0.5 cc' || entry.packing_type == 'vial per cc') {\n            var quantity = {\n              boxes: Number(entry.quantity_boxes),\n              vialsperbox: Number(entry.quantity_vialsperbox),\n              vials: Number(entry.quantity_vials),\n              mlpervial: Number(entry.quantity_mlpervial),\n              mls: Number(entry.quantity_mls)\n            };\n            finalProducts.push({\n              clinicId: parseInt(self.data.clinicId),\n              checkInId: self.data.id,\n              productId: entry.internal_qrcode,\n              quantity: JSON.stringify(quantity),\n              packing_type: entry.packing_type\n            });\n          }\n\n          if (entry.packing_type == 'per ampule') {\n            var quantity = {\n              boxes: Number(entry.quantity_boxes),\n              ampuleperbox: Number(entry.quantity_ampuleperbox),\n              ampules: Number(entry.quantity_ampules),\n              mlperampule: Number(entry.quantity_mlperampule)\n            };\n            finalProducts.push({\n              clinicId: parseInt(self.data.clinicId),\n              checkInId: self.data.id,\n              productId: entry.internal_qrcode,\n              quantity: JSON.stringify(quantity),\n              packing_type: entry.packing_type\n            });\n          }\n\n          if (entry.packing_type == 'BOTTLE') {\n            var quantity = {\n              boxes: Number(entry.quantity_boxes),\n              bottleperbox: Number(entry.quantity_bottleperbox),\n              bottles: Number(entry.quantity_bottles),\n              unitperbottle: entry.quantity_unitperbottle,\n              perbottle: Number(entry.quantity_perbottle),\n              unittotal: Number(entry.quantity_unittotal)\n            };\n            finalProducts.push({\n              clinicId: parseInt(self.data.clinicId),\n              checkInId: self.data.id,\n              productId: entry.internal_qrcode,\n              quantity: JSON.stringify(quantity),\n              packing_type: entry.packing_type\n            });\n          }\n\n          if (entry.packing_type == 'TUBE') {\n            var quantity = {\n              boxes: Number(entry.quantity_boxes),\n              tubeperbox: Number(entry.quantity_tubeperbox),\n              tubes: Number(entry.quantity_tubes),\n              unitpertube: entry.quantity_unitpertube,\n              pertube: Number(entry.quantity_pertube),\n              unittotal: Number(entry.quantity_unittotal)\n            };\n            finalProducts.push({\n              clinicId: parseInt(self.data.clinicId),\n              checkInId: self.data.id,\n              productId: entry.internal_qrcode,\n              quantity: JSON.stringify(quantity),\n              packing_type: entry.packing_type\n            });\n          }\n\n          if (entry.packing_type == 'Per supp' || entry.packing_type == 'SACHET' || entry.packing_type == 'Sachet' || entry.packing_type == 'box' || entry.packing_type == 'Set' || entry.packing_type == 'ROLLS' || entry.packing_type == 'PIECES' || entry.packing_type == 'pack' || entry.packing_type == 'Diskus') {\n            var quantity = {\n              boxes: Number(entry.quantity_boxes),\n              unitperbox: Number(entry.quantity_unitperbox),\n              units: Number(entry.quantity_units)\n            };\n            finalProducts.push({\n              clinicId: parseInt(self.data.clinicId),\n              checkInId: self.data.id,\n              productId: entry.internal_qrcode,\n              quantity: JSON.stringify(quantity),\n              packing_type: entry.packing_type\n            });\n          }\n        }\n\n        index++;\n      }); //no validation\n\n      if (index == length) {\n        self.axios.post('https://backend.medicodesolution.com/development/clinicInventory/approve/submit', {\n          finalProducts: finalProducts,\n          clinicId: self.data.clinicId\n        }).then(function (response) {\n          if (response.status == 200 && response.data.success) {\n            console.log(response);\n            self.isLoading = false;\n            Messenger().post({\n              message: response.data.success,\n              hideAfter: 3,\n              showCloseButton: true\n            });\n            return self.navigateToDashboard();\n          } else {\n            if (response.data.error) {\n              self.isLoading = false;\n              Messenger().post({\n                type: 'error',\n                message: response.data.error,\n                hideAfter: 3,\n                showCloseButton: true\n              });\n              return self.navigateToDashboard();\n            } else {\n              self.isLoading = false;\n              Messenger().post({\n                type: 'error',\n                message: response.error,\n                hideAfter: 3,\n                showCloseButton: true\n              });\n              return self.navigateToDashboard();\n            }\n          }\n        }).catch(function (error) {\n          self.isLoading = false;\n          Messenger().post({\n            type: 'error',\n            message: error,\n            hideAfter: 3,\n            showCloseButton: true\n          });\n          return self.navigateToDashboard();\n        });\n      }\n    },\n    reject: function reject() {\n      var self = this;\n      self.isLoading = true;\n      self.axios.post('https://backend.medicodesolution.com/development/clinicInventory/approve/reject/' + self.data.id, {}).then(function (response) {\n        if (response.status == 200 && response.data.success) {\n          self.isLoading = false;\n          Messenger().post({\n            message: response.data.success,\n            hideAfter: 3,\n            showCloseButton: true\n          });\n          return self.navigateToDashboard();\n        } else {\n          if (response.data.error) {\n            self.isLoading = false;\n            Messenger().post({\n              type: 'error',\n              message: response.data.error,\n              hideAfter: 3,\n              showCloseButton: true\n            });\n            return self.navigateToDashboard();\n          } else {\n            self.isLoading = false;\n            Messenger().post({\n              type: 'error',\n              message: response.error,\n              hideAfter: 3,\n              showCloseButton: true\n            });\n            return self.navigateToDashboard();\n          }\n        }\n      }).catch(function (error) {\n        self.isLoading = false;\n        Messenger().post({\n          type: 'error',\n          message: error,\n          hideAfter: 3,\n          showCloseButton: true\n        });\n        return self.navigateToDashboard();\n      });\n    }\n  },\n  mounted: function mounted() {\n    this.getCheckIn();\n    this.getAccount();\n  },\n  created: function created() {\n    initializationMessengerCode();\n    Messenger.options = {\n      extraClasses: this.locationClasses,\n      theme: 'air',\n      showCloseButton: true\n    };\n  }\n};",{"version":3,"sources":["CheckInView.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div>\r\n    <ol class=\"breadcrumb\">\r\n      <li class=\"breadcrumb-item\">YOU ARE HERE</li>\r\n      <li class=\"breadcrumb-item active\">Check In Dashboard </li>\r\n    </ol>\r\n\r\n\r\n    <b-row>\r\n      <b-col md=\"8\" xs=\"12\">\r\n        <b-tabs class=\"mb-lg\">\r\n          <b-tab title=\"Information\" active>\r\n                 <fieldset>\r\n   <legend>Complete Information</legend>\r\n    <div class=\"mb-lg\">\r\n            <h3 class=\"text-success mb-0\">{{clinicName}}</h3>\r\n           Clinic\r\n          </div>\r\n <div class=\"mb-lg\">\r\n            <h3 class=\"text-success mb-0\"><span v-if=\"data.status==0\">Awaiting Manager Confirmation</span><span v-if=\"data.status==1\">Confirmed & Added to Inventory</span><span v-if=\"data.status==-1\">Rejected/Pending Clarification</span></h3>\r\n            Status\r\n          </div>\r\n     <div class=\"mb-lg\">\r\n            <h3 class=\"text-success mb-0\">{{data.preCheckInId}}</h3>\r\n            Pre Check In Record\r\n          </div>\r\n           <div class=\"mb-lg\">\r\n            <h3 class=\"text-success mb-0\">{{data.invoiceId}}</h3>\r\n            Invoice Number \r\n          </div>\r\n           <div class=\"mb-lg\">\r\n            <h3 class=\"text-success mb-0\">{{data.totalAmount}}</h3>\r\n            Total Amount (RM)\r\n          </div>\r\n           <div class=\"mb-lg\">\r\n            <h3 class=\"text-success mb-0\">{{data.comments}}</h3>\r\n            Comments\r\n          </div>\r\n            <div class=\"mb-lg\">\r\n            <h3 class=\"text-success mb-0\">{{data.attachments}}</h3>\r\n            Attachments\r\n          </div>\r\n\r\n\r\n        \r\n          <table  class=\"table table-bordered table-lg mt-lg mb-0\" >\r\n              <thead>\r\n                <tr>\r\n                  <th class=\"hidden-sm-down\">Num.</th>\r\n                  <th>Product Name</th>\r\n                  <th>Product Type</th>\r\n                  <th class=\"hidden-sm-down\">Brand</th>\r\n                  <th class=\"\">Purchase Order Qty</th>\r\n                  <th class=\"\">Delivered Qty</th>\r\n                  <th class=\"\">Expiry Date</th>\r\n                  <th class=\"\">Batch Number</th>\r\n                   <th class=\"\">Manufacturer Barcode</th>\r\n                    <th class=\"\">Internal QR Code</th>\r\n                </tr>\r\n              </thead>\r\n                     <tbody>\r\n                <tr v-for=\"(product,index) in data.allProducts\" :key=\"product.product_name\">\r\n                  <td>{{index+1}}</td>\r\n                  <td> <b-badge variant=\"success\" class=\"text-gray-dark\">{{product.product_name}}</b-badge></td>\r\n                   <td>{{product.product_category}}</td>\r\n                    <td>{{product.manufacturer}}</td>\r\n                   <td v-if=\"product.packing_type=='TABLETS'\"> {{product.quantity_strips}} strips ({{product.quantity_tabletsperstrip}} per strip) | {{product.quantity_tablets}} tablets</td>\r\n                                       <td v-if=\"product.packing_type=='Vial / per cc' || product.packing_type=='Vial / per 0.5 cc' || product.packing_type=='per vial' || product.packing_type=='Per vial' || product.packing_type=='vial per cc'\"> {{product.quantity_mlpervial}} ML/vial | {{product.quantity_vials}} vials</td>\r\n                                         <td v-if=\"product.packing_type=='per ampule'\"> {{product.quantity_mlperampule}} ML/ampule | {{product.quantity_ampules}} ampules</td>\r\n                                         <td v-if=\"product.packing_type=='BOTTLE'\">  {{product.quantity_perbottle}}{{product.quantity_unitperbottle}}/bottle | {{product.quantity_bottles}} bottles | {{product.quantity_unittotal}}{{product.quantity_unitperbottle}} </td>\r\n                                            <td v-if=\"product.packing_type=='TUBE'\">  {{product.quantity_pertube}}{{product.quantity_unitpertube}}/tube | {{product.quantity_tubes}} tubes | {{product.quantity_unittotal}}{{product.quantity_unitpertube}} </td>\r\n                                             <td v-if=\"product.packing_type=='Per supp' || product.packing_type=='SACHET' || product.packing_type=='Sachet' || product.packing_type=='box' || product.packing_type=='Set' || product.packing_type=='ROLLS' || product.packing_type=='PIECES' || product.packing_type=='pack' || product.packing_type=='Diskus' \">  {{product.quantity_units}} units </td>\r\n                                          \r\n\r\n                                            <td v-if=\"product.packing_type=='TABLETS'\"> {{product.quantity_strips}} strips ({{product.quantity_tabletsperstrip}} per strip) | {{product.quantity_tablets}} tablets</td>\r\n                                       <td v-if=\"product.packing_type=='Vial / per cc' || product.packing_type=='Vial / per 0.5 cc' || product.packing_type=='per vial' || product.packing_type=='Per vial' || product.packing_type=='vial per cc'\"> {{product.quantity_mlpervial}} ML/vial | {{product.quantity_vials}} vials</td>\r\n                                         <td v-if=\"product.packing_type=='per ampule'\"> {{product.quantity_mlperampule}} ML/ampule | {{product.quantity_ampules}} ampules</td>\r\n                                         <td v-if=\"product.packing_type=='BOTTLE'\">  {{product.quantity_perbottle}}{{product.quantity_unitperbottle}}/bottle | {{product.quantity_bottles}} bottles | {{product.quantity_unittotal}}{{product.quantity_unitperbottle}} </td>\r\n                                            <td v-if=\"product.packing_type=='TUBE'\">  {{product.quantity_pertube}}{{product.quantity_unitpertube}}/tube | {{product.quantity_tubes}} tubes | {{product.quantity_unittotal}}{{product.quantity_unitpertube}} </td>\r\n                                             <td v-if=\"product.packing_type=='Per supp' || product.packing_type=='SACHET' || product.packing_type=='Sachet' || product.packing_type=='box' || product.packing_type=='Set' || product.packing_type=='ROLLS' || product.packing_type=='PIECES' || product.packing_type=='pack' || product.packing_type=='Diskus' \">  {{product.quantity_units}} units </td>\r\n                        <!--   <td><b-badge v-if=\"product.delivered_quantity\" :variant=\"getQuantityColor(product.quantity,product.delivered_quantity)\" class=\"text-gray-dark\">{{product.delivered_quantity}}</b-badge> <b-badge v-if=\"!product.delivered_quantity\" variant=\"danger\" class=\"text-gray-dark\">NA</b-badge></td> -->\r\n                              <td>{{product.expiry_date}}</td>\r\n                                    <td>{{product.batch_number}}</td>\r\n                                       <td><barcode v-bind:value=\"product.manufacturer_barcode\" format=\"CODE128\" :options=\"{ height:100 }\" v-if=\"product.manufacturer_barcode\">\r\n  Show this if the rendering fails.\r\n</barcode><span v-if=\"!product.manufacturer_barcode\">No record</span></td>\r\n <td><qrcode :value=\"product.internal_qrcode\" :options=\"{ height:100 }\" v-if=\"product.internal_qrcode\"></qrcode> <span v-if=\"!product.internal_qrcode\">No record</span></td>\r\n                     \r\n                </tr>\r\n              </tbody>\r\n            </table> \r\n                 </fieldset>\r\n                 <br>\r\n                 \r\n                  <b-button  variant=\"success\" class=\"btn-rounded \" @click=\"submit\" v-if=\"isLoading==false && data.status!=1\">\r\n              APPROVE & INSERT TO LIVE INVENTORY\r\n              </b-button> &nbsp;&nbsp;\r\n               <b-button  variant=\"warning\" class=\"btn-rounded \" @click=\"reject\" v-if=\"isLoading==false && data.status==0\">\r\n              REJECT\r\n              </b-button>\r\n          </b-tab>\r\n          \r\n        </b-tabs>\r\n      </b-col>\r\n      <b-col lg='8' xs='12'>\r\n       \r\n\r\n      \r\n      </b-col>\r\n    </b-row>\r\n    \r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport 'imports-loader?$=jquery,this=>window!messenger/build/js/messenger'; // eslint-disable-line\r\nimport Widget from '@/components/Widget/Widget';\r\nimport vSelect from 'vue-select';\r\nimport mock from './mock';\r\nimport VueBarcode from 'vue-barcode-master';\r\nimport VueQrcode from 'vue-qrcode-master';\r\nconst { Messenger } = window;\r\n\r\n/* eslint-disable */\r\nfunction initializationMessengerCode() {\r\n  (function () {\r\n    let $,\r\n      FlatMessage,\r\n      spinner_template,\r\n      __hasProp = {}.hasOwnProperty,\r\n      __extends = function (child, parent) {\r\n        for (const key in parent) {\r\n          if (__hasProp.call(parent, key)) child[key] = parent[key];\r\n        }\r\n\r\n        function ctor() {\r\n          this.constructor = child;\r\n        }\r\n\r\n        ctor.prototype = parent.prototype;\r\n        child.prototype = new ctor();\r\n        child.__super__ = parent.prototype;\r\n        return child;\r\n      };\r\n\r\n    $ = jQuery;\r\n\r\n    spinner_template = '<div class=\"messenger-spinner\">\\n    <span class=\"messenger-spinner-side messenger-spinner-side-left\">\\n        <span class=\"messenger-spinner-fill\"></span>\\n    </span>\\n    <span class=\"messenger-spinner-side messenger-spinner-side-right\">\\n        <span class=\"messenger-spinner-fill\"></span>\\n    </span>\\n</div>';\r\n\r\n    FlatMessage = (function (_super) {\r\n      __extends(FlatMessage, _super);\r\n\r\n      function FlatMessage() {\r\n        return FlatMessage.__super__.constructor.apply(this, arguments);\r\n      }\r\n\r\n      FlatMessage.prototype.template = function (opts) {\r\n        let $message;\r\n        $message = FlatMessage.__super__.template.apply(this, arguments);\r\n        $message.append($(spinner_template));\r\n        return $message;\r\n      };\r\n\r\n      return FlatMessage;\r\n    }(Messenger.Message));\r\n\r\n    Messenger.themes.air = {\r\n      Message: FlatMessage,\r\n    };\r\n  }).call(window);\r\n}\r\n/* eslint-enable */\r\n\r\n\r\nexport default {\r\n  name: 'FormValidation',\r\n  components: { Widget,vSelect,barcode: VueBarcode,qrcode:VueQrcode},\r\n  data() {\r\n    return {\r\n        clinicId: this.$route.params.clinicId,\r\n      clinicName:'',\r\n            mock,\r\n      data:{\r\n        attachments:[]\r\n      },\r\n      checkInId: this.$route.params.checkInId,\r\n      isLoading:false,\r\n      locationClasses: 'messenger-fixed messenger-on-top messenger-on-right',\r\n    };\r\n  },\r\n  \r\n  methods: {\r\n     async getAccount() {\r\n  try {\r\n   const response = await this.axios.get('https://backend.medicodesolution.com/development/clinic/'+ this.clinicId)\r\n   this.clinicName= response.data.accountInfo[0].name;\r\n    \r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n},\r\n  getQuantityColor(ordered,received){\r\n    if(received>=ordered){\r\n      return 'success';\r\n    }\r\n    else{\r\n      return 'warning';\r\n    }\r\n  },\r\n   async getCheckIn() {\r\n  try {\r\n   const response = await this.axios.get('https://backend.medicodesolution.com/development/checkin/'+ this.checkInId)\r\n   this.data = response.data.checkInInfo[0];\r\n  this.data.allProducts = JSON.parse(this.data.allProducts);\r\n \r\n \r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n},\r\n     navigateToDashboard(){\r\n        this.$router.push({name:'Dashboard' });\r\n    },\r\n  submit(){\r\n    var self=this;\r\n    // self.isLoading = true;\r\n  var finalProducts = new Array();\r\n\r\n  var index=0;var length = self.data.allProducts.length;\r\n   self.data.allProducts.forEach(function(entry) {\r\n   \r\n   if(entry.delivered_quantity!=undefined && entry.delivered_quantity!=0 && entry.delivered_quantity!='' ){\r\n    \r\n if(entry.packing_type=='TABLETS'){\r\n  var quantity = {\r\n     boxes:Number(entry.quantity_boxes),\r\n     stripsperbox:Number(entry.quantity_stripsperbox),\r\n     strips:Number(entry.quantity_strips),\r\n     tabletsperstrip:Number(entry.quantity_tabletsperstrip),\r\n     tablets:Number(entry.quantity_tablets)\r\n   };\r\n finalProducts.push({clinicId:parseInt(self.data.clinicId),checkInId:self.data.id,productId:entry.internal_qrcode,quantity:JSON.stringify(quantity),packing_type:entry.packing_type});\r\n   }\r\n    if(entry.packing_type=='Per vial' || entry.packing_type=='per vial' || entry.packing_type=='Vial / per cc' || entry.packing_type=='Vial / per 0.5 cc' || entry.packing_type=='vial per cc'){\r\n  var quantity = {\r\n     boxes:Number(entry.quantity_boxes),\r\n     vialsperbox:Number(entry.quantity_vialsperbox),\r\n     vials:Number(entry.quantity_vials),\r\n     mlpervial:Number(entry.quantity_mlpervial),\r\n     mls:Number(entry.quantity_mls)\r\n   };\r\n finalProducts.push({clinicId:parseInt(self.data.clinicId),checkInId:self.data.id,productId:entry.internal_qrcode,quantity:JSON.stringify(quantity),packing_type:entry.packing_type});\r\n   }\r\n     if(entry.packing_type=='per ampule'){\r\n  var quantity = {\r\n     boxes:Number(entry.quantity_boxes),\r\n     ampuleperbox:Number(entry.quantity_ampuleperbox),\r\n     ampules:Number(entry.quantity_ampules),\r\n     mlperampule:Number(entry.quantity_mlperampule),\r\n   };\r\n finalProducts.push({clinicId:parseInt(self.data.clinicId),checkInId:self.data.id,productId:entry.internal_qrcode,quantity:JSON.stringify(quantity),packing_type:entry.packing_type});\r\n   }\r\n        if(entry.packing_type=='BOTTLE'){\r\n  var quantity = {\r\n     boxes:Number(entry.quantity_boxes),\r\n     bottleperbox:Number(entry.quantity_bottleperbox),\r\n     bottles:Number(entry.quantity_bottles),\r\n     unitperbottle:entry.quantity_unitperbottle,\r\n     perbottle:Number(entry.quantity_perbottle),\r\n     unittotal:Number(entry.quantity_unittotal),\r\n   };\r\n  finalProducts.push({clinicId:parseInt(self.data.clinicId),checkInId:self.data.id,productId:entry.internal_qrcode,quantity:JSON.stringify(quantity),packing_type:entry.packing_type});\r\n   }\r\n     if(entry.packing_type=='TUBE'){\r\n  var quantity = {\r\n     boxes:Number(entry.quantity_boxes),\r\n     tubeperbox:Number(entry.quantity_tubeperbox),\r\n     tubes:Number(entry.quantity_tubes),\r\n     unitpertube:entry.quantity_unitpertube,\r\n     pertube:Number(entry.quantity_pertube),\r\n     unittotal:Number(entry.quantity_unittotal),\r\n   };\r\n finalProducts.push({clinicId:parseInt(self.data.clinicId),checkInId:self.data.id,productId:entry.internal_qrcode,quantity:JSON.stringify(quantity),packing_type:entry.packing_type});\r\n   }\r\n\r\n      if(entry.packing_type=='Per supp' || entry.packing_type=='SACHET' || entry.packing_type=='Sachet' || entry.packing_type=='box' || entry.packing_type=='Set' || entry.packing_type=='ROLLS' || entry.packing_type=='PIECES' || entry.packing_type=='pack' || entry.packing_type=='Diskus'){\r\n  var quantity = {\r\n     boxes:Number(entry.quantity_boxes),\r\n     unitperbox:Number(entry.quantity_unitperbox),\r\n     units:Number(entry.quantity_units),\r\n   };\r\n finalProducts.push({clinicId:parseInt(self.data.clinicId),checkInId:self.data.id,productId:entry.internal_qrcode,quantity:JSON.stringify(quantity),packing_type:entry.packing_type});\r\n   }\r\n\r\n\r\n\r\n\r\n }   \r\n\r\n  \r\n    index++;\r\n});\r\n  \r\n\r\n     //no validation\r\n   if(index==length){\r\n   \r\n    self.axios.post('https://backend.medicodesolution.com/development/clinicInventory/approve/submit', {\r\n          \r\n        finalProducts:finalProducts,\r\n        clinicId:self.data.clinicId\r\n    })\r\n                .then(function (response) {\r\n                if(response.status == 200 && response.data.success){\r\n                  console.log(response)\r\n                                   self.isLoading = false;\r\n                   Messenger().post({message:response.data.success, hideAfter: 3,showCloseButton:true});\r\n                   return self.navigateToDashboard();\r\n         \r\n                }\r\n                else {\r\n                  if(response.data.error){\r\n                    self.isLoading = false;\r\n                 Messenger().post({ type:'error',message :response.data.error, hideAfter: 3,showCloseButton:true});\r\n              return self.navigateToDashboard();\r\n                  }\r\n                 else {\r\n                   self.isLoading = false;\r\n               Messenger().post({ type:'error',message :response.error, hideAfter: 3,showCloseButton:true});\r\n                   return self.navigateToDashboard();\r\n                   }\r\n                }\r\n                })\r\n                .catch(function (error) {\r\n                self.isLoading = false;\r\n                 Messenger().post({ type:'error',message :error, hideAfter: 3,showCloseButton:true}); \r\n                     return self.navigateToDashboard();               \r\n                }); \r\n\r\n   }\r\n    \r\n\r\n  },\r\n    reject(){\r\n    var self=this;\r\n   self.isLoading = true;\r\n\r\n\r\n  \r\n    self.axios.post('https://backend.medicodesolution.com/development/clinicInventory/approve/reject/'+self.data.id, {\r\n          \r\n       \r\n\r\n    })\r\n                .then(function (response) {\r\n                if(response.status == 200 && response.data.success){\r\n                                   self.isLoading = false;\r\n                   Messenger().post({message:response.data.success, hideAfter: 3,showCloseButton:true});\r\n                   return self.navigateToDashboard();\r\n         \r\n                }\r\n                else {\r\n                  if(response.data.error){\r\n                    self.isLoading = false;\r\n                 Messenger().post({ type:'error',message :response.data.error, hideAfter: 3,showCloseButton:true});\r\n              return self.navigateToDashboard();\r\n                  }\r\n                 else {\r\n                   self.isLoading = false;\r\n               Messenger().post({ type:'error',message :response.error, hideAfter: 3,showCloseButton:true});\r\n                   return self.navigateToDashboard();\r\n                   }\r\n                }\r\n                })\r\n                .catch(function (error) {\r\n                self.isLoading = false;\r\n                 Messenger().post({ type:'error',message :error, hideAfter: 3,showCloseButton:true}); \r\n                     return self.navigateToDashboard();               \r\n                }); \r\n\r\n     \r\n\r\n  },\r\n  },\r\n   mounted(){\r\n     this.getCheckIn();\r\n            this.getAccount();  \r\n     \r\n  \r\n      \r\n   },\r\n     created() {\r\n    initializationMessengerCode();\r\n    Messenger.options = {\r\n      extraClasses: this.locationClasses,\r\n      theme: 'air',\r\n      showCloseButton: true,\r\n    };\r\n  \r\n  },\r\n};\r\n</script>\r\n"],"sourceRoot":"src\\pages\\Accounts"}]}